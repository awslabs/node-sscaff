"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path = require("path");
const __1 = require("..");
void testWithFixture('fixture1', {
    sscaff: 'here',
    here: 'sscaff',
});
void testWithFixture('fixture2', {
    boom: '_boom_',
});
void testWithFixture('fixture3', {
    name: 'oliver',
});
void testWithFixture('fixture4');
async function testWithFixture(fixture, variables) {
    test(fixture, async () => {
        const input = path.join(__dirname, fixture);
        const expected = path.join(__dirname, `${fixture}.expected`);
        const actual = await fs_1.promises.mkdtemp('/tmp/sscaff-test');
        const outdir = path.join(actual, 'myproject');
        await __1.sscaff(input, outdir, variables);
        try {
            await expectDirsEqual(actual, expected, ['.hooks.sscaff.js']);
        }
        catch (e) {
            console.log(`\nto update:\n  rsync --delete -av ${actual}/ ${expected}/`);
            throw e;
        }
    });
}
async function expectDirsEqual(left, right, exclude = []) {
    const leftFiles = (await fs_1.promises.readdir(left)).sort().filter(x => !exclude.includes(x));
    const rightFiles = (await fs_1.promises.readdir(right)).sort().filter(x => !exclude.includes(x));
    expect(leftFiles).toEqual(rightFiles);
    for (const file of leftFiles) {
        const leftFile = path.join(left, file);
        const rightFile = path.join(right, file);
        const leftIsDirectory = (await fs_1.promises.stat(leftFile)).isDirectory();
        const rightIsDirectory = (await fs_1.promises.stat(rightFile)).isDirectory();
        expect(leftIsDirectory).toEqual(rightIsDirectory);
        if (leftIsDirectory) {
            await expectDirsEqual(leftFile, rightFile);
            continue;
        }
        const leftContents = await fs_1.promises.readFile(leftFile, 'utf-8');
        const rightContents = await fs_1.promises.readFile(rightFile, 'utf-8');
        expect(leftContents).toEqual(rightContents);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NjYWZmLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzc2NhZmYudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUFvQztBQUNwQyw2QkFBNkI7QUFDN0IsMEJBQTRCO0FBRTVCLEtBQUssZUFBZSxDQUFDLFVBQVUsRUFBRTtJQUMvQixNQUFNLEVBQUUsTUFBTTtJQUNkLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsS0FBSyxlQUFlLENBQUMsVUFBVSxFQUFFO0lBQy9CLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsS0FBSyxlQUFlLENBQUMsVUFBVSxFQUFFO0lBQy9CLElBQUksRUFBRSxRQUFRO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsS0FBSyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFakMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxPQUFlLEVBQUUsU0FBcUM7SUFDbkYsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLE9BQU8sV0FBVyxDQUFDLENBQUM7UUFFN0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFFLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDOUMsTUFBTSxVQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV2QyxJQUFJO1lBQ0YsTUFBTSxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUMvRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsTUFBTSxLQUFLLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDMUUsTUFBTSxDQUFDLENBQUM7U0FDVDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxVQUFvQixFQUFFO0lBQ2hGLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBTSxhQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFNLGFBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRDLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxFQUFFO1FBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXpDLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBTSxhQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sYUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUVsRCxJQUFJLGVBQWUsRUFBRTtZQUNuQixNQUFNLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDM0MsU0FBUztTQUNWO1FBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxhQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRCxNQUFNLGFBQWEsR0FBRyxNQUFNLGFBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDN0M7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgc3NjYWZmIH0gZnJvbSAnLi4nO1xuXG52b2lkIHRlc3RXaXRoRml4dHVyZSgnZml4dHVyZTEnLCB7XG4gIHNzY2FmZjogJ2hlcmUnLFxuICBoZXJlOiAnc3NjYWZmJyxcbn0pO1xuXG52b2lkIHRlc3RXaXRoRml4dHVyZSgnZml4dHVyZTInLCB7XG4gIGJvb206ICdfYm9vbV8nLFxufSk7XG5cbnZvaWQgdGVzdFdpdGhGaXh0dXJlKCdmaXh0dXJlMycsIHtcbiAgbmFtZTogJ29saXZlcicsXG59KTtcblxudm9pZCB0ZXN0V2l0aEZpeHR1cmUoJ2ZpeHR1cmU0Jyk7XG5cbmFzeW5jIGZ1bmN0aW9uIHRlc3RXaXRoRml4dHVyZShmaXh0dXJlOiBzdHJpbmcsIHZhcmlhYmxlcz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pIHtcbiAgdGVzdChmaXh0dXJlLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBmaXh0dXJlKTtcbiAgICBjb25zdCBleHBlY3RlZCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIGAke2ZpeHR1cmV9LmV4cGVjdGVkYCk7XG5cbiAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBmcy5ta2R0ZW1wKCcvdG1wL3NzY2FmZi10ZXN0Jyk7XG4gICAgY29uc3Qgb3V0ZGlyID0gcGF0aC5qb2luKGFjdHVhbCwgJ215cHJvamVjdCcpO1xuICAgIGF3YWl0IHNzY2FmZihpbnB1dCwgb3V0ZGlyLCB2YXJpYWJsZXMpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4cGVjdERpcnNFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbJy5ob29rcy5zc2NhZmYuanMnXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coYFxcbnRvIHVwZGF0ZTpcXG4gIHJzeW5jIC0tZGVsZXRlIC1hdiAke2FjdHVhbH0vICR7ZXhwZWN0ZWR9L2ApO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBleHBlY3REaXJzRXF1YWwobGVmdDogc3RyaW5nLCByaWdodDogc3RyaW5nLCBleGNsdWRlOiBzdHJpbmdbXSA9IFtdKSB7XG4gIGNvbnN0IGxlZnRGaWxlcyA9IChhd2FpdCBmcy5yZWFkZGlyKGxlZnQpKS5zb3J0KCkuZmlsdGVyKHggPT4gIWV4Y2x1ZGUuaW5jbHVkZXMoeCkpO1xuICBjb25zdCByaWdodEZpbGVzID0gKGF3YWl0IGZzLnJlYWRkaXIocmlnaHQpKS5zb3J0KCkuZmlsdGVyKHggPT4gIWV4Y2x1ZGUuaW5jbHVkZXMoeCkpO1xuICBleHBlY3QobGVmdEZpbGVzKS50b0VxdWFsKHJpZ2h0RmlsZXMpO1xuXG4gIGZvciAoY29uc3QgZmlsZSBvZiBsZWZ0RmlsZXMpIHtcbiAgICBjb25zdCBsZWZ0RmlsZSA9IHBhdGguam9pbihsZWZ0LCBmaWxlKTtcbiAgICBjb25zdCByaWdodEZpbGUgPSBwYXRoLmpvaW4ocmlnaHQsIGZpbGUpO1xuXG4gICAgY29uc3QgbGVmdElzRGlyZWN0b3J5ID0gKGF3YWl0IGZzLnN0YXQobGVmdEZpbGUpKS5pc0RpcmVjdG9yeSgpO1xuICAgIGNvbnN0IHJpZ2h0SXNEaXJlY3RvcnkgPSAoYXdhaXQgZnMuc3RhdChyaWdodEZpbGUpKS5pc0RpcmVjdG9yeSgpO1xuICAgIGV4cGVjdChsZWZ0SXNEaXJlY3RvcnkpLnRvRXF1YWwocmlnaHRJc0RpcmVjdG9yeSk7XG5cbiAgICBpZiAobGVmdElzRGlyZWN0b3J5KSB7XG4gICAgICBhd2FpdCBleHBlY3REaXJzRXF1YWwobGVmdEZpbGUsIHJpZ2h0RmlsZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsZWZ0Q29udGVudHMgPSBhd2FpdCBmcy5yZWFkRmlsZShsZWZ0RmlsZSwgJ3V0Zi04Jyk7XG4gICAgY29uc3QgcmlnaHRDb250ZW50cyA9IGF3YWl0IGZzLnJlYWRGaWxlKHJpZ2h0RmlsZSwgJ3V0Zi04Jyk7XG4gICAgZXhwZWN0KGxlZnRDb250ZW50cykudG9FcXVhbChyaWdodENvbnRlbnRzKTtcbiAgfVxufSJdfQ==